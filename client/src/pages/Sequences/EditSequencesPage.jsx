import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import {
Â  Box,
Â  Typography,
Â  TextField,
Â  Button,
Â  Paper,
Â  Alert,
Â  CircularProgress,
Â  Skeleton,
Â  Checkbox,
Â  FormControlLabel,
Â  Table,
Â  TableBody,
Â  TableCell,
Â  TableContainer,
Â  TableHead,
Â  TableRow,
Â  IconButton,
Â  Dialog,
Â  DialogTitle,
Â  DialogContent,
Â  DialogActions,
Â  Select,
Â  MenuItem,
Â  FormControl,
Â  InputLabel,
Â  Tooltip,
Â  Chip,
} from '@mui/material';
import { 
Â  ArrowBack, 
Â  Save, 
Â  Clear, 
Â  Add,
Â  MoreVert,
} from '@mui/icons-material';
import { ThemeProvider } from '@mui/material/styles';
import { 
Â  fetchSequenceById, 
Â  updateSequence, 
Â  fetchSequenceWithItems,
Â  createSequenceItem,
Â  updateSequenceItem,
Â  deleteSequenceItem,
Â  getAllActivityTypes,
} from "../../services/sequenceService";
import theme from "../../components/Theme";
import ConfirmDialog from '../../components/dialogs/ConfirmDialog';
import ActionMenu from '../../components/tableFormat/ActionMenu';

const EditSequencesPage = () => {
Â  const navigate = useNavigate();
Â  const { id } = useParams();
Â  const [error, setError] = useState(null);
Â  // ðŸ‘‡ Added state for success message
Â  const [successMessage, setSuccessMessage] = useState(null); 
Â  const [isSubmitting, setIsSubmitting] = useState(false);
Â  const [fieldErrors, setFieldErrors] = useState({});
Â  const [touched, setTouched] = useState({});
Â  
Â  const [formData, setFormData] = useState({
Â  Â  SequenceName: "",
Â  Â  SequenceDescription: "",
Â  Â  Active: true,
Â  });
Â  
Â  const [sequenceItems, setSequenceItems] = useState([]);
Â  const [activityTypes, setActivityTypes] = useState([]);
Â  const [loading, setLoading] = useState(true);
Â  
Â  // Dialog state for adding/editing items
Â  const [itemDialogOpen, setItemDialogOpen] = useState(false);
Â  const [editingItem, setEditingItem] = useState(null);
Â  const [itemFormData, setItemFormData] = useState({
Â  Â  ActivityTypeID: '',
Â  Â  SequenceItemDescription: '',
Â  Â  DaysFromStart: 0,
Â  });
Â  const [itemErrors, setItemErrors] = useState({});
Â  
Â  // Action menu state
Â  const [anchorEl, setAnchorEl] = useState(null);
Â  const [menuRow, setMenuRow] = useState(null);
Â  
Â  // Confirm Dialog state
Â  const [confirmDialog, setConfirmDialog] = useState({
Â  Â  open: false,
Â  Â  title: '',
Â  Â  description: '',
Â  Â  onConfirm: null,
Â  });

Â  const requiredFields = ['SequenceName'];

Â  const getFieldError = (fieldName) => {
Â  Â  return touched[fieldName] && fieldErrors[fieldName] ? (
Â  Â  Â  <span style={{ display: 'flex', alignItems: 'center' }}>
Â  Â  Â  Â  <span style={{ color: '#ff4444', marginRight: '4px' }}></span>
Â  Â  Â  Â  {fieldErrors[fieldName][0]}
Â  Â  Â  </span>
Â  Â  ) : '';
Â  };

Â  const isFieldInvalid = (fieldName) => {
Â  Â  return touched[fieldName] && fieldErrors[fieldName] && fieldErrors[fieldName].length > 0;
Â  };

Â  const validateField = (name, value) => {
Â  Â  const errors = [];
Â  Â  const strValue = value?.toString().trim();

Â  Â  if (requiredFields.includes(name) && (!strValue || strValue === '')) {
Â  Â  Â  errors.push('This field is required.');
Â  Â  }

Â  Â  if (strValue) {
Â  Â  Â  if (name === 'SequenceName') {
Â  Â  Â  Â  if (strValue.length < 1) {
Â  Â  Â  Â  Â  errors.push('Sequence name is required');
Â  Â  Â  Â  }
Â  Â  Â  Â  if (strValue.length > 255) {
Â  Â  Â  Â  Â  errors.push('Sequence name cannot exceed 255 characters.');
Â  Â  Â  Â  }
Â  Â  Â  }

Â  Â  Â  if (name === 'SequenceDescription') {
Â  Â  Â  Â  if (strValue.length > 2000) {
Â  Â  Â  Â  Â  errors.push('Description cannot exceed 2000 characters.');
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  }

Â  Â  return errors;
Â  };

Â  const validateForm = () => {
Â  Â  const newErrors = {};
Â  Â  Object.keys(formData).forEach((field) => {
Â  Â  Â  const errors = validateField(field, formData[field]);
Â  Â  Â  if (errors.length > 0) newErrors[field] = errors;
Â  Â  });
Â  Â  setFieldErrors(newErrors);
Â  Â  return Object.keys(newErrors).length === 0;
Â  };

Â  
Â  const validateItemForm = () => {
Â  Â  const errors = {};
Â  Â  
Â  Â  if (!itemFormData.ActivityTypeID) {
Â  Â  Â  errors.ActivityTypeID = 'Activity type is required';
Â  Â  }
Â  Â  
Â  Â  if (!itemFormData.SequenceItemDescription?.trim()) {
Â  Â  Â  errors.SequenceItemDescription = 'Description is required';
Â  Â  } else if (itemFormData.SequenceItemDescription.length > 255) {
Â  Â  Â  errors.SequenceItemDescription = 'Description cannot exceed 255 characters';
Â  Â  }
Â  Â  
Â  Â  const daysValue = itemFormData.DaysFromStart?.toString().trim();
Â  Â  
Â  Â  if (daysValue === '' || daysValue === undefined || daysValue === null) {
Â  Â  Â  errors.DaysFromStart = 'Days from start is required';
Â  Â  } else {
Â  Â  Â  const numValue = Number(daysValue);
Â  Â  Â  if (isNaN(numValue) || !Number.isInteger(numValue)) {
Â  Â  Â  Â  errors.DaysFromStart = 'Must be a valid whole number';
Â  Â  Â  } else if (numValue < 0) {
Â  Â  Â  Â  errors.DaysFromStart = 'Days from start cannot be negative';
Â  Â  Â  } else if (numValue > 32767) {
Â  Â  Â  Â  errors.DaysFromStart = 'Days from start cannot exceed 32767';
Â  Â  Â  }
Â  Â  }
Â  Â  
Â  Â  setItemErrors(errors);
Â  Â  return Object.keys(errors).length === 0;
Â  };

Â  useEffect(() => {
Â  Â  const loadData = async () => {
Â  Â  Â  if (!id) {
Â  Â  Â  Â  setError("No sequence ID provided");
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  try {
Â  Â  Â  Â  // Load activity types
Â  Â  Â  Â  const types = await getAllActivityTypes();
Â  Â  Â  Â  setActivityTypes(types || []);
Â  Â  Â  Â  
Â  Â  Â  Â  // Load sequence with items
Â  Â  Â  Â  const response = await fetchSequenceWithItems(id);
Â  Â  Â  Â  const sequenceData = response.data || response;
Â  Â  Â  Â  
Â  Â  Â  Â  setFormData({
Â  Â  Â  Â  Â  SequenceName: sequenceData.SequenceName || "",
Â  Â  Â  Â  Â  SequenceDescription: sequenceData.SequenceDescription || "",
Â  Â  Â  Â  Â  Active: sequenceData.Active !== undefined ? sequenceData.Active : true,
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  setSequenceItems(sequenceData.Items || []);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error('Error loading sequence:', err);
Â  Â  Â  Â  setError("Failed to load sequence data");
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  };
Â  Â  loadData();
Â  }, [id]);

Â  const handleInputChange = (e) => {
Â  Â  const { name, value, type, checked } = e.target;
Â  Â  const val = type === 'checkbox' ? checked : value;
Â  Â  
Â  Â  setFormData(prev => ({ ...prev, [name]: val }));
Â  Â  setTouched(prev => ({ ...prev, [name]: true }));

Â  Â  if (touched[name]) {
Â  Â  Â  const errors = validateField(name, val);
Â  Â  Â  setFieldErrors(prev => ({
Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  [name]: errors.length > 0 ? errors : undefined
Â  Â  Â  }));
Â  Â  }

Â  Â  if (error) {
Â  Â  Â  setError(null);
Â  Â  }
Â  Â  if (successMessage) { // Clear success message on new input
Â  Â  Â  setSuccessMessage(null);
Â  Â  }
Â  };

Â  const handleBlur = (e) => {
Â  Â  const { name, value, type, checked } = e.target;
Â  Â  const val = type === 'checkbox' ? checked : value;
Â  Â  
Â  Â  setTouched(prev => ({ ...prev, [name]: true }));

Â  Â  const errors = validateField(name, val);
Â  Â  setFieldErrors(prev => ({
Â  Â  Â  ...prev,
Â  Â  Â  [name]: errors.length > 0 ? errors : undefined
Â  Â  }));
Â  };

Â  const handleSubmit = async (e) => {
Â  Â  e.preventDefault();
Â  Â  
Â  Â  const allTouched = {};
Â  Â  Object.keys(formData).forEach(key => {
Â  Â  Â  allTouched[key] = true;
Â  Â  });
Â  Â  setTouched(allTouched);

Â  Â  if (!validateForm()) {
Â  Â  Â  setError("Please fix the errors below before submitting");
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  setIsSubmitting(true);
Â  Â  Â  setError(null);
Â  Â  Â  setSuccessMessage(null); // Clear previous success message
Â  Â  Â  await updateSequence(id, formData);
Â  Â  Â  setSuccessMessage("Sequence updated successfully!"); // Set success message
Â  Â  Â  // Optionally, navigate away or keep them on the page
Â  Â  Â  // navigate("/sequences");
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error updating sequence:', error);
Â  Â  Â  
Â  Â  Â  if (error.response?.status === 409) {
Â  Â  Â  Â  setError('Sequence with this name already exists');
Â  Â  Â  } else if (error.response?.status === 400) {
Â  Â  Â  Â  setError(error.response.data?.error || 'Invalid data provided');
Â  Â  Â  } else if (error.response?.status >= 500) {
Â  Â  Â  Â  setError('Server error. Please try again later');
Â  Â  Â  } else {
Â  Â  Â  Â  setError('Failed to update sequence. Please try again.');
Â  Â  Â  }
Â  Â  } finally {
Â  Â  Â  setIsSubmitting(false);
Â  Â  }
Â  };

Â  // Item management functions
Â  const handleOpenItemDialog = (item = null) => {
Â  Â  if (item) {
Â  Â  Â  setEditingItem(item);
Â  Â  Â  setItemFormData({
Â  Â  Â  Â  ActivityTypeID: item.ActivityTypeID,
Â  Â  Â  Â  SequenceItemDescription: item.SequenceItemDescription,
Â  Â  Â  Â  DaysFromStart: item.DaysFromStart,
Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  setEditingItem(null);
Â  Â  Â  setItemFormData({
Â  Â  Â  Â  ActivityTypeID: '',
Â  Â  Â  Â  SequenceItemDescription: '',
Â  Â  Â  Â  DaysFromStart: sequenceItems.length > 0 
Â  Â  Â  Â  Â  ? Math.max(...sequenceItems.map(i => i.DaysFromStart)) + 1 
Â  Â  Â  Â  Â  : 0,
Â  Â  Â  });
Â  Â  }
Â  Â  setItemErrors({});
Â  Â  setItemDialogOpen(true);
Â  Â  setError(null); // Clear error when opening dialog
Â  Â  setSuccessMessage(null); // Clear success message when opening dialog
Â  };

Â  const handleCloseItemDialog = () => {
Â  Â  setItemDialogOpen(false);
Â  Â  setEditingItem(null);
Â  Â  setItemFormData({
Â  Â  Â  ActivityTypeID: '',
Â  Â  Â  SequenceItemDescription: '',
Â  Â  Â  DaysFromStart: 0,
Â  Â  });
Â  Â  setItemErrors({});
Â  };

Â  const handleItemFormChange = (e) => {
Â  Â  const { name, value } = e.target;

Â  Â  setItemFormData(prev => ({ ...prev, [name]: value }));

Â  Â  // Validate the field immediately
Â  Â  const errors = {};

Â  Â  if (name === 'ActivityTypeID' && !value) {
Â  Â  Â  errors.ActivityTypeID = 'Activity type is required';
Â  Â  }

Â  Â  if (name === 'SequenceItemDescription') {
Â  Â  Â  if (!value?.trim()) {
Â  Â  Â  Â  errors.SequenceItemDescription = 'Description is required';
Â  Â  Â  } else if (value.length > 255) {
Â  Â  Â  Â  errors.SequenceItemDescription = 'Description cannot exceed 255 characters';
Â  Â  Â  }
Â  Â  }

Â  Â  if (name === 'DaysFromStart') {
Â  Â  Â  const daysValue = value?.toString().trim();

Â  Â  Â  if (daysValue === '' || daysValue === undefined || daysValue === null) {
Â  Â  Â  Â  errors.DaysFromStart = 'Days from start is required';
Â  Â  Â  } else {
Â  Â  Â  Â  const numValue = Number(daysValue);
Â  Â  Â  Â  if (isNaN(numValue) || !Number.isInteger(numValue)) {
Â  Â  Â  Â  Â  errors.DaysFromStart = 'Must be a valid whole number';
Â  Â  Â  Â  } else if (numValue < 0) {
Â  Â  Â  Â  Â  errors.DaysFromStart = 'Days from start cannot be negative';
Â  Â  Â  Â  } else if (numValue > 32767) {
Â  Â  Â  Â  Â  errors.DaysFromStart = 'Days from start cannot exceed 32767';
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  }

Â  Â  setItemErrors(prev => ({
Â  Â  Â  ...prev,
Â  Â  Â  ...errors,
Â  Â  Â  [name]: errors[name] || undefined
Â  Â  }));
Â  };

Â  const handleSaveItem = async () => {
Â  Â  if (!validateItemForm()) return;

Â  Â  try {
Â  Â  Â  setError(null);
Â  Â  Â  setSuccessMessage(null); // Clear previous success message
Â  Â  Â  
Â  Â  Â  const itemDataToSave = {
Â  Â  Â  Â  ...itemFormData,
Â  Â  Â  Â  DaysFromStart: parseInt(itemFormData.DaysFromStart, 10),
Â  Â  Â  };

Â  Â  Â  if (editingItem) {
Â  Â  Â  Â  // Update existing item
Â  Â  Â  Â  await updateSequenceItem(editingItem.SequenceItemID, itemDataToSave);

Â  Â  Â  Â  setSequenceItems(prev => prev.map(item =>
Â  Â  Â  Â  Â  item.SequenceItemID === editingItem.SequenceItemID
Â  Â  Â  Â  Â  Â  ? {
Â  Â  Â  Â  Â  Â  Â  Â  ...item,
Â  Â  Â  Â  Â  Â  Â  Â  ...itemDataToSave,
Â  Â  Â  Â  Â  Â  Â  Â  ActivityTypeName: activityTypes.find(t => t.TypeID === itemDataToSave.ActivityTypeID)?.TypeName
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  : item
Â  Â  Â  Â  ));

Â  Â  Â  Â  setSuccessMessage('Sequence item updated successfully');
Â  Â  Â  } else {
Â  Â  Â  Â  // Create new item
Â  Â  Â  Â  const response = await createSequenceItem({
Â  Â  Â  Â  Â  ...itemDataToSave,
Â  Â  Â  Â  Â  SequenceID: parseInt(id),
Â  Â  Â  Â  });

Â  Â  Â  Â  const newItemId = response.data?.SequenceItemID || response.SequenceItemID;

Â  Â  Â  Â  setSequenceItems(prev => [...prev, {
Â  Â  Â  Â  Â  SequenceItemID: newItemId,
Â  Â  Â  Â  Â  ...itemDataToSave,
Â  Â  Â  Â  Â  ActivityTypeName: activityTypes.find(t => t.TypeID === itemDataToSave.ActivityTypeID)?.TypeName,
Â  Â  Â  Â  Â  Active: true,
Â  Â  Â  Â  }].sort((a, b) => a.DaysFromStart - b.DaysFromStart));

Â  Â  Â  Â  setSuccessMessage('Sequence item added successfully');
Â  Â  Â  }

Â  Â  Â  handleCloseItemDialog();
Â  Â  } catch (err) {
Â  Â  Â  console.error('Error saving sequence item:', err);
Â  Â  Â  setError(err.response?.data?.error || 'Failed to save sequence item');
Â  Â  }
Â  };

Â  const handleDeactivateItem = async (item) => {
Â  Â  try {
Â  Â  Â  setError(null);
Â  Â  Â  setSuccessMessage(null); // Clear previous success message
Â  Â  Â  
Â  Â  Â  const updateData = {
Â  Â  Â  Â  ActivityTypeID: item.ActivityTypeID,
Â  Â  Â  Â  SequenceItemDescription: item.SequenceItemDescription,
Â  Â  Â  Â  DaysFromStart: item.DaysFromStart,
Â  Â  Â  Â  Active: false
Â  Â  Â  };
Â  Â  Â  
Â  Â  Â  await updateSequenceItem(item.SequenceItemID, updateData);
Â  Â  Â  
Â  Â  Â  setSequenceItems(prev => prev.map(i =>
Â  Â  Â  Â  i.SequenceItemID === item.SequenceItemID
Â  Â  Â  Â  Â  ? { ...i, Active: false }
Â  Â  Â  Â  Â  : i
Â  Â  Â  ));
Â  Â  Â  
Â  Â  Â  setSuccessMessage('Sequence item deactivated successfully');
Â  Â  } catch (err) {
Â  Â  Â  console.error('Error deactivating item:', err);
Â  Â  Â  setError(err.response?.data?.error || 'Failed to deactivate sequence item');
Â  Â  }
Â  };

Â  const handleReactivateItem = async (item) => {
Â  Â  try {
Â  Â  Â  setError(null);
Â  Â  Â  setSuccessMessage(null); // Clear previous success message
Â  Â  Â  
Â  Â  Â  const updateData = {
Â  Â  Â  Â  ActivityTypeID: item.ActivityTypeID,
Â  Â  Â  Â  SequenceItemDescription: item.SequenceItemDescription,
Â  Â  Â  Â  DaysFromStart: item.DaysFromStart,
Â  Â  Â  Â  Active: true
Â  Â  Â  };
Â  Â  Â  
Â  Â  Â  await updateSequenceItem(item.SequenceItemID, updateData);
Â  Â  Â  
Â  Â  Â  setSequenceItems(prev => prev.map(i =>
Â  Â  Â  Â  i.SequenceItemID === item.SequenceItemID
Â  Â  Â  Â  Â  ? { ...i, Active: true }
Â  Â  Â  Â  Â  : i
Â  Â  Â  ));
Â  Â  Â  
Â  Â  Â  setSuccessMessage('Sequence item reactivated successfully');
Â  Â  } catch (err) {
Â  Â  Â  console.error('Error reactivating item:', err);
Â  Â  Â  setError(err.response?.data?.error || 'Failed to reactivate sequence item');
Â  Â  }
Â  };

Â  const handleOpenActionMenu = (event, item) => {
Â  Â  setAnchorEl(event.currentTarget);
Â  Â  setMenuRow(item);
Â  Â  setError(null); // Clear error on new action
Â  Â  setSuccessMessage(null); // Clear success message on new action
Â  };

Â  const handleCloseActionMenu = () => {
Â  Â  setAnchorEl(null);
Â  Â  setMenuRow(null);
Â  };

Â  const handleEdit = (item) => {
Â  Â  handleOpenItemDialog(item);
Â  };

Â  const handleDeactivate = (item) => {
Â  Â  setConfirmDialog({
Â  Â  Â  open: true,
Â  Â  Â  title: 'Deactivate Sequence Item',
Â  Â  Â  description: `Are you sure you want to deactivate "${item.SequenceItemDescription}"? This item will no longer be used in the sequence.`,
Â  Â  Â  onConfirm: () => {
Â  Â  Â  Â  handleDeactivateItem(item);
Â  Â  Â  Â  handleConfirmDialogClose();
Â  Â  Â  },
Â  Â  });
Â  Â  handleCloseActionMenu(); // Close the action menu after triggering dialog
Â  };

Â  const handleReactivate = (item) => {
Â  Â  setConfirmDialog({
Â  Â  Â  open: true,
Â  Â  Â  title: 'Reactivate Sequence Item',
Â  Â  Â  description: `Are you sure you want to reactivate "${item.SequenceItemDescription}"?`,
Â  Â  Â  onConfirm: () => {
Â  Â  Â  Â  handleReactivateItem(item);
Â  Â  Â  Â  handleConfirmDialogClose();
Â  Â  Â  },
Â  Â  });
Â  Â  handleCloseActionMenu(); // Close the action menu after triggering dialog
Â  };

Â  const handleConfirmDialogClose = () => {
Â  Â  setConfirmDialog({
Â  Â  Â  open: false,
Â  Â  Â  title: '',
Â  Â  Â  description: '',
Â  Â  Â  onConfirm: null,
Â  Â  });
Â  };

Â  if (loading) {
Â  Â  return (
Â  Â  Â  <ThemeProvider theme={theme}>
Â  Â  Â  Â  <Box sx={{ p: 3 }}>
Â  Â  Â  Â  Â  <Skeleton variant="rectangular" width="100%" height={400} />
Â  Â  Â  Â  </Box>
Â  Â  Â  </ThemeProvider>
Â  Â  );
Â  }

Â  return (
Â  Â  <ThemeProvider theme={theme}>
Â  Â  Â  <Box sx={{ width: '100%', backgroundColor: '#fafafa', minHeight: '100vh', p: 3 }}>
Â  Â  Â  Â  <Box sx={{ maxWidth: 1200, mx: 'auto' }}>
Â  Â  Â  Â  Â  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
Â  Â  Â  Â  Â  Â  <Typography variant="h4" sx={{ fontWeight: 600 }}>
Â  Â  Â  Â  Â  Â  Â  Edit Sequence
Â  Â  Â  Â  Â  Â  </Typography>
Â  Â  Â  Â  Â  Â  <Box sx={{ display: 'flex', gap: 2 }}>
Â  Â  Â  Â  Â  Â  Â  <Button variant="outlined" startIcon={<ArrowBack />} onClick={() => navigate(-1)}>
Â  Â  Â  Â  Â  Â  Â  Â  Back
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  Â  Â  Â  variant="outlined" 
Â  Â  Â  Â  Â  Â  Â  Â  startIcon={<Clear />} 
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate("/sequences")} 
Â  Â  Â  Â  Â  Â  Â  Â  disabled={isSubmitting}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  Â  Â  Â  variant="contained" 
Â  Â  Â  Â  Â  Â  Â  Â  startIcon={isSubmitting ? <CircularProgress size={20} /> : <Save />} 
Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleSubmit} 
Â  Â  Â  Â  Â  Â  Â  Â  disabled={isSubmitting || !validateForm()}
Â  Â  Â  Â  Â  Â  Â  Â  sx={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: '#050505',
Â  Â  Â  Â  Â  Â  Â  Â  Â  '&:hover': { backgroundColor: '#333333' },
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {isSubmitting ? 'Updating...' : 'Update Sequence'}
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  Â  </Box>

Â  Â  Â  Â  Â  {error && (
Â  Â  Â  Â  Â  Â  <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError(null)}>
Â  Â  Â  Â  Â  Â  Â  {error}
Â  Â  Â  Â  Â  Â  </Alert>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* Display Success Message */}
Â  Â  Â  Â  Â  {successMessage && (
Â  Â  Â  Â  Â  Â  <Alert severity="success" sx={{ mb: 3 }} onClose={() => setSuccessMessage(null)}>
Â  Â  Â  Â  Â  Â  Â  {successMessage}
Â  Â  Â  Â  Â  Â  </Alert>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  <Paper elevation={0} sx={{ p: 3, mb: 3 }}>
Â  Â  Â  Â  Â  Â  <Typography variant="h6" sx={{ mb: 3, fontWeight: 600 }}>
Â  Â  Â  Â  Â  Â  Â  Sequence Information
Â  Â  Â  Â  Â  Â  </Typography>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <form onSubmit={handleSubmit}>
Â  Â  Â  Â  Â  Â  Â  <Box sx={{ display: 'grid', gridTemplateColumns: '1fr', gap: 3 }}>
Â  Â  Â  Â  Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Sequence Name"
Â  Â  Â  Â  Â  Â  Â  Â  Â  name="SequenceName"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.SequenceName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onBlur={handleBlur}
Â  Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isSubmitting}
Â  Â  Â  Â  Â  Â  Â  Â  Â  error={isFieldInvalid('SequenceName')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  helperText={getFieldError('SequenceName')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  FormHelperTextProps={{ component: 'div' }}
Â  Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Description"
Â  Â  Â  Â  Â  Â  Â  Â  Â  name="SequenceDescription"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.SequenceDescription}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onBlur={handleBlur}
Â  Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  Â  Â  multiline
Â  Â  Â  Â  Â  Â  Â  Â  Â  rows={4}
Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isSubmitting}
Â  Â  Â  Â  Â  Â  Â  Â  Â  error={isFieldInvalid('SequenceDescription')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  helperText={getFieldError('SequenceDescription') || 'Optional: Describe the purpose and workflow of this sequence'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  FormHelperTextProps={{ component: 'div' }}
Â  Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  Â  <FormControlLabel
Â  Â  Â  Â  Â  Â  Â  Â  Â  control={
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Checkbox
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  checked={formData.Active}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="Active"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isSubmitting}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Active (sequence is ready to use)"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  </Paper>

Â  Â  Â  Â  Â  {/* Sequence Items Section */}
Â  Â  Â  Â  Â  <Paper elevation={0} sx={{ p: 3 }}>
Â  Â  Â  Â  Â  Â  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
Â  Â  Â  Â  Â  Â  Â  <Typography variant="h6" sx={{ fontWeight: 600 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Sequence Items ({sequenceItems.length})
Â  Â  Â  Â  Â  Â  Â  </Typography>
Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  variant="contained"
Â  Â  Â  Â  Â  Â  Â  Â  startIcon={<Add />}
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleOpenItemDialog()}
Â  Â  Â  Â  Â  Â  Â  Â  sx={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: '#050505',
Â  Â  Â  Â  Â  Â  Â  Â  Â  '&:hover': { backgroundColor: '#333333' },
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Add Item
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  </Box>

Â  Â  Â  Â  Â  Â  {sequenceItems.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  <Box sx={{ textAlign: 'center', py: 4, color: 'text.secondary' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <Typography>No sequence items yet. Add items to define the workflow steps.</Typography>
Â  Â  Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <TableContainer>
Â  Â  Â  Â  Â  Â  Â  Â  <Table>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableHead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableRow>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell width="80px">Day</TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>Activity Type</TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>Description</TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell width="100px" align="center">Status</TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell width="120px" align="right">Actions</TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableHead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableBody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {sequenceItems
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .sort((a, b) => a.DaysFromStart - b.DaysFromStart)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .map((item) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableRow key={item.SequenceItemID} hover>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Chip 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label={`Day ${item.DaysFromStart}`} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  size="small"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sx={{ fontWeight: 600 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>{item.ActivityTypeName}</TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Tooltip title={item.SequenceItemDescription}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.SequenceItemDescription.length > 60
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? `${item.SequenceItemDescription.substring(0, 60)}...`
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : item.SequenceItemDescription}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Tooltip>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell align="center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Chip
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label={item.Active ? 'Active' : 'Inactive'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  size="small"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color={item.Active ? 'success' : 'default'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell align="right">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <IconButton
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  size="small"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => handleOpenActionMenu(e, item)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sx={{ color: 'text.secondary' }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <MoreVert fontSize="small" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </IconButton>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableBody>
Â  Â  Â  Â  Â  Â  Â  Â  </Table>
Â  Â  Â  Â  Â  Â  Â  </TableContainer>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </Paper>
Â  Â  Â  Â  </Box>
Â  Â  Â  </Box>

Â  Â  Â  {/* Add/Edit Item Dialog */}
Â  Â  Â  <Dialog 
Â  Â  Â  Â  open={itemDialogOpen} 
Â  Â  Â  Â  onClose={handleCloseItemDialog}
Â  Â  Â  Â  maxWidth="sm"
Â  Â  Â  Â  fullWidth
Â  Â  Â  >
Â  Â  Â  Â  <DialogTitle>
Â  Â  Â  Â  Â  {editingItem ? 'Edit Sequence Item' : 'Add Sequence Item'}
Â  Â  Â  Â  </DialogTitle>
Â  Â  Â  Â  <DialogContent>
Â  Â  Â  Â  Â  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, pt: 2 }}>
Â  Â  Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  Â  Â  label="Days from Start"
Â  Â  Â  Â  Â  Â  Â  name="DaysFromStart"
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  value={itemFormData.DaysFromStart}
Â  Â  Â  Â  Â  Â  Â  onChange={handleItemFormChange}
Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  error={!!itemErrors.DaysFromStart}
Â  Â  Â  Â  Â  Â  Â  helperText={itemErrors.DaysFromStart || 'Which day in the sequence should this activity occur?'}
Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  <FormControl fullWidth required error={!!itemErrors.ActivityTypeID}>
Â  Â  Â  Â  Â  Â  Â  <InputLabel>Activity Type</InputLabel>
Â  Â  Â  Â  Â  Â  Â  <Select
Â  Â  Â  Â  Â  Â  Â  Â  name="ActivityTypeID"
Â  Â  Â  Â  Â  Â  Â  Â  value={itemFormData.ActivityTypeID}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleItemFormChange}
Â  Â  Â  Â  Â  Â  Â  Â  label="Activity Type"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {activityTypes.map((type) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <MenuItem key={type.TypeID} value={type.TypeID}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {type.TypeName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </MenuItem>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </Select>
Â  Â  Â  Â  Â  Â  Â  {itemErrors.ActivityTypeID && (
Â  Â  Â  Â  Â  Â  Â  Â  <Typography variant="caption" color="error" sx={{ mt: 0.5, ml: 1.5 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {itemErrors.ActivityTypeID}
Â  Â  Â  Â  Â  Â  Â  Â  </Typography>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </FormControl>

Â  Â  Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  Â  Â  label="Description"
Â  Â  Â  Â  Â  Â  Â  name="SequenceItemDescription"
Â  Â  Â  Â  Â  Â  Â  value={itemFormData.SequenceItemDescription}
Â  Â  Â  Â  Â  Â  Â  onChange={handleItemFormChange}
Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  multiline
Â  Â  Â  Â  Â  Â  Â  rows={3}
Â  Â  Â  Â  Â  Â  Â  error={!!itemErrors.SequenceItemDescription}
Â  Â  Â  Â  Â  Â  Â  helperText={itemErrors.SequenceItemDescription || 'Describe what should be done in this step'}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  </DialogContent>
Â  Â  Â  Â  <DialogActions sx={{ p: 2 }}>
Â  Â  Â  Â  Â  <Button onClick={handleCloseItemDialog}>Cancel</Button>
Â  Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  Â  onClick={handleSaveItem} 
Â  Â  Â  Â  Â  Â  variant="contained"
Â  Â  Â  Â  Â  Â  sx={{
Â  Â  Â  Â  Â  Â  Â  backgroundColor: '#050505',
Â  Â  Â  Â  Â  Â  Â  '&:hover': { backgroundColor: '#333333' },
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {editingItem ? 'Update' : 'Add'}
Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  </DialogActions>
Â  Â  Â  </Dialog>

Â  Â  Â  {/* Action Menu */}
Â  Â  Â  <ActionMenu
Â  Â  Â  Â  anchorEl={anchorEl}
Â  Â  Â  Â  open={Boolean(anchorEl)}
Â  Â  Â  Â  onClose={handleCloseActionMenu}
Â  Â  Â  Â  menuRow={menuRow}
Â  Â  Â  Â  idField="SequenceItemID"
Â  Â  Â  Â  entityType="sequenceItem"
Â  Â  Â  Â  onEdit={handleEdit}
Â  Â  Â  Â  onDelete={handleDeactivate}
Â  Â  Â  Â  onReactivate={handleReactivate}
Â  Â  Â  Â  tooltips={{
Â  Â  Â  Â  Â  actionMenu: {
Â  Â  Â  Â  Â  Â  edit: "Edit this sequence item",
Â  Â  Â  Â  Â  Â  delete: "Deactivate this sequence item",
Â  Â  Â  Â  Â  Â  reactivate: "Reactivate this sequence item"
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }}
Â  Â  Â  />

Â  Â  Â  {/* Confirm Dialog */}
Â  Â  Â  <ConfirmDialog
Â  Â  Â  Â  open={confirmDialog.open}
Â  Â  Â  Â  title={confirmDialog.title}
Â  Â  Â  Â  description={confirmDialog.description}
Â  Â  Â  Â  onConfirm={confirmDialog.onConfirm}
Â  Â  Â  Â  onCancel={handleConfirmDialogClose}
Â  Â  Â  />
Â  Â  </ThemeProvider>
Â  );
};

export default EditSequencesPage;